"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class tracked_object_t(object):
    __slots__ = ["size", "state", "object_type", "occluded", "truncated", "bbox_cam_left", "bbox_cam_right", "pos_in_velo", "quat_in_velo"]

    def __init__(self):
        self.size = [ 0.0 for dim0 in range(3) ]
        self.state = 0
        self.object_type = [ 0.0 for dim0 in range(8) ]
        self.occluded = 0
        self.truncated = 0
        self.bbox_cam_left = [ [ 0 for dim1 in range(2) ] for dim0 in range(2) ]
        self.bbox_cam_right = [ [ 0 for dim1 in range(2) ] for dim0 in range(2) ]
        self.pos_in_velo = [ 0.0 for dim0 in range(3) ]
        self.quat_in_velo = [ 0.0 for dim0 in range(4) ]

    def encode(self):
        buf = BytesIO()
        buf.write(tracked_object_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack('>3d', *self.size[:3]))
        buf.write(struct.pack(">b", self.state))
        buf.write(struct.pack('>8d', *self.object_type[:8]))
        buf.write(struct.pack(">bb", self.occluded, self.truncated))
        for i0 in range(2):
            buf.write(struct.pack('>2h', *self.bbox_cam_left[i0][:2]))
        for i0 in range(2):
            buf.write(struct.pack('>2h', *self.bbox_cam_right[i0][:2]))
        buf.write(struct.pack('>3d', *self.pos_in_velo[:3]))
        buf.write(struct.pack('>4d', *self.quat_in_velo[:4]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != tracked_object_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return tracked_object_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = tracked_object_t()
        self.size = struct.unpack('>3d', buf.read(24))
        self.state = struct.unpack(">b", buf.read(1))[0]
        self.object_type = struct.unpack('>8d', buf.read(64))
        self.occluded, self.truncated = struct.unpack(">bb", buf.read(2))
        self.bbox_cam_left = []
        for i0 in range(2):
            self.bbox_cam_left.append(struct.unpack('>2h', buf.read(4)))
        self.bbox_cam_right = []
        for i0 in range(2):
            self.bbox_cam_right.append(struct.unpack('>2h', buf.read(4)))
        self.pos_in_velo = struct.unpack('>3d', buf.read(24))
        self.quat_in_velo = struct.unpack('>4d', buf.read(32))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if tracked_object_t in parents: return 0
        tmphash = (0xba1c0bd2b4cf98dd) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if tracked_object_t._packed_fingerprint is None:
            tracked_object_t._packed_fingerprint = struct.pack(">Q", tracked_object_t._get_hash_recursive([]))
        return tracked_object_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

